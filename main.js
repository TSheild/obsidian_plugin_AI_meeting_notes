/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var st=Object.create;var y=Object.defineProperty;var it=Object.getOwnPropertyDescriptor;var rt=Object.getOwnPropertyNames;var nt=Object.getPrototypeOf,at=Object.prototype.hasOwnProperty;var ot=(r,i)=>{for(var t in i)y(r,t,{get:i[t],enumerable:!0})},O=(r,i,t,e)=>{if(i&&typeof i=="object"||typeof i=="function")for(let s of rt(i))!at.call(r,s)&&s!==t&&y(r,s,{get:()=>i[s],enumerable:!(e=it(i,s))||e.enumerable});return r};var D=(r,i,t)=>(t=r!=null?st(nt(r)):{},O(i||!r||!r.__esModule?y(t,"default",{value:r,enumerable:!0}):t,r)),dt=r=>O(y({},"__esModule",{value:!0}),r);var ut={};ot(ut,{default:()=>M});module.exports=dt(ut);var m=require("obsidian");var S=class{constructor(){this.mediaRecorder=null;this.chunks=[];this.streams=[];this.startedAt=null;this.mimeType="audio/webm"}isRecording(){return this.mediaRecorder!==null}async start(i){if(this.mediaRecorder)throw new Error("Recording is already in progress.");this.chunks=[],this.streams=[];let t=await navigator.mediaDevices.getUserMedia({audio:!0});this.streams.push(t);let e=[...t.getAudioTracks()];if(i.includeSystemAudio&&navigator.mediaDevices.getDisplayMedia)try{let a=await navigator.mediaDevices.getDisplayMedia({audio:!0,video:!0});this.streams.push(a),e.push(...a.getAudioTracks());for(let o of a.getVideoTracks())o.stop()}catch(a){throw this.stopStreams(),a}let s=new MediaStream(e),n;MediaRecorder.isTypeSupported(i.mimeType)?(n=new MediaRecorder(s,{mimeType:i.mimeType}),this.mimeType=i.mimeType):(n=new MediaRecorder(s),this.mimeType=n.mimeType||this.mimeType),n.addEventListener("dataavailable",a=>{a.data&&a.data.size>0&&this.chunks.push(a.data)}),this.mediaRecorder=n,this.startedAt=new Date,this.mediaRecorder.start()}async stop(){if(!this.mediaRecorder)throw new Error("No recording in progress.");let i=this.mediaRecorder;return new Promise((t,e)=>{let s=o=>{a(),e(o instanceof ErrorEvent?o.error:new Error("Recording failed."))},n=()=>{var p;let o=new Date,c=(p=this.startedAt)!=null?p:o,g=new Blob(this.chunks,{type:this.mimeType}),u=o.getTime()-c.getTime();a(),t({blob:g,startedAt:c,endedAt:o,durationMs:u,mimeType:this.mimeType})},a=()=>{i.removeEventListener("error",s),i.removeEventListener("stop",n),this.mediaRecorder=null,this.startedAt=null,this.chunks=[],this.stopStreams()};i.addEventListener("error",s,{once:!0}),i.addEventListener("stop",n,{once:!0});try{i.state!=="inactive"?i.stop():n()}catch(o){a(),e(o)}})}async cancel(){if(!this.mediaRecorder)return;let i=this.mediaRecorder;await new Promise(t=>{let e=()=>{i.removeEventListener("stop",e),i.removeEventListener("error",e),this.mediaRecorder=null,this.startedAt=null,this.chunks=[],this.stopStreams(),t()};i.addEventListener("stop",e,{once:!0}),i.addEventListener("error",e,{once:!0});try{i.state!=="inactive"?i.stop():e()}catch(s){console.error(s),e()}})}stopStreams(){for(let i of this.streams)for(let t of i.getTracks())t.stop();this.streams=[]}};var B=require("child_process"),f=class extends Error{constructor(t,e,s,n){super(t);this.stdout=e,this.stderr=s,this.exitCode=n}};function E(r){let i=[],t="",e=!1,s=!1,n=!1;for(let a of r){if(n){t+=a,n=!1;continue}if(a==="\\"){n=!0;continue}if(a==="'"&&!s){e=!e;continue}if(a==='"'&&!e){s=!s;continue}if((a===" "||a===`
`||a==="	")&&!e&&!s){t.length>0&&(i.push(t),t="");continue}t+=a}return t.length>0&&i.push(t),i}async function A(r,i,t={}){return new Promise((e,s)=>{var c,g;let n=(0,B.spawn)(r,i,{cwd:t.cwd,env:{...process.env,...t.env},shell:!1}),a="",o="";(c=n.stdout)==null||c.on("data",u=>{a+=u.toString()}),(g=n.stderr)==null||g.on("data",u=>{o+=u.toString()}),n.on("error",u=>{s(u)}),n.on("close",u=>{let p=u!=null?u:0;p===0?e({stdout:a,stderr:o,exitCode:p}):s(new f(`Command failed with exit code ${p}`,a,o,p))}),t.input!==void 0?n.stdin&&(n.stdin.write(t.input),n.stdin.end()):n.stdin&&n.stdin.end()})}async function L(r){return(await A(r.command,r.args,{input:r.prompt.endsWith(`
`)?r.prompt:`${r.prompt}
`})).stdout.trim()}var $=require("fs"),v=D(require("path"));async function U(r){await A(r.command,r.args);let i=v.parse(r.audioFilePath).name,t=v.join(r.outputDir,`${i}.${r.outputFormat}`);try{await $.promises.access(t)}catch(s){throw new Error(`Transcription output not found at ${t}`)}return{transcript:await $.promises.readFile(t,"utf8"),transcriptFilePath:t}}var d=require("obsidian"),W=["You are an assistant that creates detailed meeting minutes from transcripts.","Use the transcript below to craft a Markdown document with clearly labeled sections.","Provide concise bullet lists and capture who said what when relevant.","","Transcript:","{{transcript}}","","Write Markdown with the following structure:","## Summary","- key bullet points that capture the overall discussion","","## Action Items","- bullet list of tasks, include owners and due dates when mentioned; if none, write '- None'","","## Decisions","- bullet list of decisions made; if none, write '- None'"].join(`
`),V={recordingsFolder:"AI Meeting Notes/Audio",transcriptsFolder:"AI Meeting Notes/Transcripts",notesFolder:"AI Meeting Notes/Summaries",includeSystemAudio:!0,audioFormat:"webm",whisperCommand:"whisper",whisperArgs:'--model {{model}} --output_dir "{{outputDir}}" --output_format txt "{{audioFilePath}}"',whisperOutputFormat:"txt",whisperModel:"base",summarizerCommand:"ollama",summarizerArgs:"run llama3",summaryPrompt:W,includeTranscriptInNote:!0,autoOpenNote:!0},T=class extends d.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;t.empty(),t.createEl("h2",{text:"AI Meeting Notes"}),new d.Setting(t).setName("Record system audio").setDesc("Attempt to capture system audio output in addition to the microphone.").addToggle(e=>e.setValue(this.plugin.settings.includeSystemAudio).onChange(async s=>{this.plugin.settings.includeSystemAudio=s,await this.plugin.saveSettings()})),new d.Setting(t).setName("Audio format").setDesc("Choose the container format used for recordings.").addDropdown(e=>e.addOption("webm","WebM (Opus)").addOption("ogg","Ogg (Opus)").setValue(this.plugin.settings.audioFormat).onChange(async s=>{this.plugin.settings.audioFormat=s,await this.plugin.saveSettings()})),new d.Setting(t).setName("Recordings folder").setDesc("Vault folder where raw audio files are stored.").addText(e=>e.setPlaceholder("AI Meeting Notes/Audio").setValue(this.plugin.settings.recordingsFolder).onChange(async s=>{this.plugin.settings.recordingsFolder=s.trim(),await this.plugin.saveSettings()})),new d.Setting(t).setName("Transcripts folder").setDesc("Vault folder where Whisper outputs transcripts.").addText(e=>e.setPlaceholder("AI Meeting Notes/Transcripts").setValue(this.plugin.settings.transcriptsFolder).onChange(async s=>{this.plugin.settings.transcriptsFolder=s.trim(),await this.plugin.saveSettings()})),new d.Setting(t).setName("Notes folder").setDesc("Vault folder where final meeting notes are saved.").addText(e=>e.setPlaceholder("AI Meeting Notes/Summaries").setValue(this.plugin.settings.notesFolder).onChange(async s=>{this.plugin.settings.notesFolder=s.trim(),await this.plugin.saveSettings()})),t.createEl("h3",{text:"Transcription (Whisper)"}),new d.Setting(t).setName("Whisper command").setDesc("Executable used to run transcription (e.g., whisper or whisper.cpp).").addText(e=>e.setPlaceholder("whisper").setValue(this.plugin.settings.whisperCommand).onChange(async s=>{this.plugin.settings.whisperCommand=s.trim(),await this.plugin.saveSettings()})),new d.Setting(t).setName("Whisper model").setDesc("Model argument passed to Whisper (e.g., tiny, base, small).").addText(e=>e.setPlaceholder("base").setValue(this.plugin.settings.whisperModel).onChange(async s=>{this.plugin.settings.whisperModel=s.trim(),await this.plugin.saveSettings()})),new d.Setting(t).setName("Whisper arguments template").setDesc("Arguments passed to the transcription command. Use placeholders like {{audioFilePath}} and {{outputDir}}.").addTextArea(e=>e.setPlaceholder('--model {{model}} --output_dir "{{outputDir}}" --output_format txt "{{audioFilePath}}"').setValue(this.plugin.settings.whisperArgs).onChange(async s=>{this.plugin.settings.whisperArgs=s.trim(),await this.plugin.saveSettings()})),new d.Setting(t).setName("Whisper output format").setDesc("File extension produced by the transcription command (e.g., txt, json).").addText(e=>e.setPlaceholder("txt").setValue(this.plugin.settings.whisperOutputFormat).onChange(async s=>{this.plugin.settings.whisperOutputFormat=s.trim()||"txt",await this.plugin.saveSettings()})),t.createEl("h3",{text:"Summarizer"}),new d.Setting(t).setName("Summarizer command").setDesc("Executable used for generating meeting notes (e.g., ollama).").addText(e=>e.setPlaceholder("ollama").setValue(this.plugin.settings.summarizerCommand).onChange(async s=>{this.plugin.settings.summarizerCommand=s.trim(),await this.plugin.saveSettings()})),new d.Setting(t).setName("Summarizer arguments").setDesc("Arguments passed to the summarizer command. Use placeholders like {{title}}.").addText(e=>e.setPlaceholder("run llama3").setValue(this.plugin.settings.summarizerArgs).onChange(async s=>{this.plugin.settings.summarizerArgs=s.trim(),await this.plugin.saveSettings()})),new d.Setting(t).setName("Summary prompt").setDesc("Template prompt sent to the summarizer. {{transcript}} will be replaced with the transcript text.").addTextArea(e=>{e.setPlaceholder(W).setValue(this.plugin.settings.summaryPrompt).onChange(async s=>{this.plugin.settings.summaryPrompt=s.trim(),await this.plugin.saveSettings()}),e.inputEl.rows=8}),new d.Setting(t).setName("Include transcript in note").setDesc("Append the full transcript to the generated meeting note.").addToggle(e=>e.setValue(this.plugin.settings.includeTranscriptInNote).onChange(async s=>{this.plugin.settings.includeTranscriptInNote=s,await this.plugin.saveSettings()})),new d.Setting(t).setName("Open note after creation").setDesc("Automatically open the generated note in a new pane.").addToggle(e=>e.setValue(this.plugin.settings.autoOpenNote).onChange(async s=>{this.plugin.settings.autoOpenNote=s,await this.plugin.saveSettings()}))}};var l=require("obsidian"),F=D(require("path"));async function b(r,i){if(!i||i.trim().length===0)return;let t=r.vault.adapter,s=(0,l.normalizePath)(i.trim()).split("/"),n="";for(let a of s)n=n?`${n}/${a}`:a,await t.exists(n)||await r.vault.createFolder(n)}function x(r,i){return!r||r.trim().length===0?(0,l.normalizePath)(i):(0,l.normalizePath)(`${r}/${i}`)}function I(r,i){let t=r.vault.adapter;if(t instanceof l.FileSystemAdapter){let e=t.getBasePath();return!i||i==="."?e:F.join(e,i)}return null}function _(r,i){let t=r.vault.adapter;if(t instanceof l.FileSystemAdapter){let e=t.getBasePath(),s=F.relative(e,i);return(0,l.normalizePath)(s)}return null}async function j(r,i,t){let e=(0,l.normalizePath)(i),s=r.vault.getAbstractFileByPath(e);return s instanceof l.TFile?(await r.vault.modifyBinary(s,t),s):r.vault.createBinary(e,t)}async function Y(r,i,t){let e=(0,l.normalizePath)(i),s=r.vault.getAbstractFileByPath(e);return s instanceof l.TFile?(await r.vault.modify(s,t),s):r.vault.create(e,t)}function q(r){let i=r.getFullYear(),t=String(r.getMonth()+1).padStart(2,"0"),e=String(r.getDate()).padStart(2,"0"),s=String(r.getHours()).padStart(2,"0"),n=String(r.getMinutes()).padStart(2,"0"),a=String(r.getSeconds()).padStart(2,"0");return`${i}-${t}-${e} ${s}-${n}-${a}`}function R(r){return r.toISOString()}function P(r,i){return r.replace(/{{\s*([\w.-]+)\s*}}/g,(t,e)=>{let s=i[e];return s==null?"":String(s)})}var G=D(require("path")),M=class extends m.Plugin{constructor(){super(...arguments);this.settings=V;this.recorder=new S;this.statusBarEl=null}async onload(){await this.loadSettings(),this.statusBarEl=this.addStatusBarItem(),this.setStatus("Idle"),this.addRibbonIcon("mic","AI Meeting Notes: start or stop recording",async()=>{await this.toggleRecording()}),this.addCommand({id:"ai-meeting-notes-start-recording",name:"Start meeting recording",callback:async()=>{await this.startRecording()}}),this.addCommand({id:"ai-meeting-notes-stop-recording",name:"Stop meeting recording",callback:async()=>{await this.stopRecording()}}),this.addSettingTab(new T(this.app,this))}onunload(){this.recorder.cancel()}async loadSettings(){let t=await this.loadData();this.settings=Object.assign({},V,t)}async saveSettings(){await this.saveData(this.settings)}async toggleRecording(){this.recorder.isRecording()?await this.stopRecording():await this.startRecording()}async startRecording(){if(this.recorder.isRecording()){new m.Notice("AI Meeting Notes is already recording.");return}try{await this.recorder.start({includeSystemAudio:this.settings.includeSystemAudio,mimeType:this.getMimeType(this.settings.audioFormat)}),this.setStatus("Recording\u2026",!0),new m.Notice("AI Meeting Notes recording started.")}catch(t){this.handleError("Failed to start recording",t),this.setStatus("Idle")}}async stopRecording(){if(!this.recorder.isRecording()){new m.Notice("AI Meeting Notes is not recording.");return}this.setStatus("Finishing recording\u2026");let t;try{t=await this.recorder.stop()}catch(e){this.handleError("Failed to stop recording",e),this.setStatus("Idle");return}try{await this.processRecording(t),new m.Notice("AI meeting notes created.")}catch(e){this.handleError("Failed to process recording",e)}finally{this.setStatus("Idle")}}async processRecording(t){var z;let s=`Meeting ${q(t.startedAt)}`,n=`${s}.${this.settings.audioFormat}`;await b(this.app,this.settings.recordingsFolder);let a=x(this.settings.recordingsFolder,n),o=await t.blob.arrayBuffer();await j(this.app,a,o);let c=I(this.app,a);if(!c)throw new Error("Unable to resolve a filesystem path for the audio file. This feature requires the desktop app.");await b(this.app,this.settings.transcriptsFolder);let g=I(this.app,this.settings.transcriptsFolder||".");if(!g)throw new Error("Unable to resolve transcripts folder path. This feature requires the desktop app.");let u={audioFilePath:c,audioDir:G.dirname(c),outputDir:g,model:this.settings.whisperModel,fileName:n,baseName:s,title:s,startedAt:R(t.startedAt),endedAt:R(t.endedAt),durationMinutes:Math.max(1,Math.round(t.durationMs/6e4))},p=P(this.settings.whisperArgs,u),N=E(p).filter(h=>h.length>0);N.some(h=>h===c||h.includes(c))||N.push(c),this.setStatus("Transcribing audio\u2026");let w=await U({command:this.settings.whisperCommand,args:N,audioFilePath:c,outputDir:g,outputFormat:this.settings.whisperOutputFormat||"txt"}),H=(z=_(this.app,w.transcriptFilePath))!=null?z:x(this.settings.transcriptsFolder,`${s}.${this.settings.whisperOutputFormat}`),k={...u,transcript:w.transcript,transcriptPath:w.transcriptFilePath},J=P(this.settings.summarizerArgs,k),K=E(J).filter(h=>h.length>0),Q=P(this.settings.summaryPrompt,k),C;this.setStatus("Creating meeting summary\u2026");try{C=await L({command:this.settings.summarizerCommand,args:K,prompt:Q})}catch(h){console.error("Summarizer failed",h),new m.Notice("Summarizer command failed. Saving transcript without AI summary."),C="*Summary unavailable. See console for details.*"}this.setStatus("Saving results\u2026");let X=this.composeNote({title:s,audioVaultPath:a,transcriptVaultPath:H,summaryMarkdown:C,transcript:w.transcript,startedAt:t.startedAt,durationMs:t.durationMs});await b(this.app,this.settings.notesFolder);let Z=`${s}.md`,tt=x(this.settings.notesFolder,Z),et=await Y(this.app,tt,X);this.settings.autoOpenNote&&await this.openFile(et)}composeNote(t){let e=this.formatDuration(t.durationMs),s=R(t.startedAt),n=[`- [[${t.audioVaultPath}|Audio recording]]`];t.transcriptVaultPath&&n.push(`- [[${t.transcriptVaultPath}|Transcript]]`);let a=t.summaryMarkdown.trim().length>0?t.summaryMarkdown.trim():"*No summary generated.*",o=["---",`created: ${s}`,`audio: [[${t.audioVaultPath}]]`,`transcript: [[${t.transcriptVaultPath}]]`,"---",`# ${t.title}`,`**Recorded:** ${t.startedAt.toLocaleString()} (${e})`,"## Resources",n.join(`
`),a];return this.settings.includeTranscriptInNote&&(o.push("## Transcript"),o.push(t.transcript.trim())),o.join(`

`).trimEnd()+`
`}getMimeType(t){return t==="ogg"?"audio/ogg;codecs=opus":"audio/webm;codecs=opus"}setStatus(t,e=!1){this.statusBarEl&&(this.statusBarEl.setText(`AI Meeting Notes: ${t}`),this.statusBarEl.toggleClass("ai-meeting-notes-recording",e))}formatDuration(t){let e=Math.max(1,Math.round(t/1e3)),s=Math.floor(e/60),n=e%60;return s>0?`${s}m ${n.toString().padStart(2,"0")}s`:`${n}s`}async openFile(t){await this.app.workspace.getLeaf(!0).openFile(t)}handleError(t,e){if(console.error(t,e),e instanceof f){let s=e.stderr||e.stdout||e.message;new m.Notice(`${t}: ${s}`);return}if(e instanceof Error){new m.Notice(`${t}: ${e.message}`);return}new m.Notice(`${t}.`)}};
